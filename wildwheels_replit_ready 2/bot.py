from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import os

TOKEN = "7671147312:AAFySpZoV3njldLyeqjg7S5P3IlO9I-vUdA"
PHOTO_PATH = os.path.expanduser("~/Documents/telega")

pickup_buttons = [
    ["Toyota Hilux", "Toyota Tundra", "Toyota Tacoma"],
    ["Mitsubishi L200", "Isuzu D-Max", "Nissan Navara (NP300)"],
    ["Nissan Titan / Titan XD", "Ford Ranger", "Ford F-150 / F-250 / F-350"],
    ["Volkswagen Amarok", "Mazda BT-50", "SsangYong Actyon Sports"],
    ["UAZ Pickup", "Great Wall Wingle 5 / Wingle 7", "Great Wall Poer (GWM Poer)"],
    ["JAC T6 / T8 / T9", "Foton Tunland V9 / G7", "Sollers ST8"],
    ["Chevrolet Colorado / Silverado", "GMC Sierra / Canyon", "RAM 1500 / 2500 / 3500"],
    ["Jeep Gladiator", "Honda Ridgeline", "Rivian R1T"],
    ["Changan Hunter", "JMC Vigus / Baodian", "Dongfeng DF6"],
    ["TLC79", "Rambox"]
]

next_step_buttons = [["–ö—É–Ω–≥", "–ê–≤—Ç–æ–¥–æ–º"], ["–ö—Ä—ã—à–∫–∞", "–î—Ä—É–≥–æ–µ"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
kung_options = [["–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–ü—Ä–æ"], ["–ü–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º—É –∑–∞–∫–∞–∑—É"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
ADMIN_CHAT_ID = 7702769974
user_states = {}
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id == ADMIN_CHAT_ID:
        return
    reply_markup = ReplyKeyboardMarkup(pickup_buttons, resize_keyboard=True)
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –º–∞—Ä–∫—É –ø–∏–∫–∞–ø–∞:", reply_markup=reply_markup)
    user_states[user_id] = "awaiting_pickup"
    user_data[user_id] = {}

async def handle_pickup_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    if user_id == ADMIN_CHAT_ID:
        return
    state = user_states.get(user_id)

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        if state == "awaiting_kung_type":
            user_states[user_id] = "awaiting_addon"
            reply_markup = ReplyKeyboardMarkup(next_step_buttons, resize_keyboard=True)
            await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –Ω–∞–¥—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=reply_markup)
            return
        elif state == "awaiting_addon":
            user_states[user_id] = "awaiting_pickup"
            reply_markup = ReplyKeyboardMarkup(pickup_buttons, resize_keyboard=True)
            await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –º–∞—Ä–∫–∏ –ø–∏–∫–∞–ø–∞:", reply_markup=reply_markup)
            return
        elif state == "awaiting_final_contact":
            user_states[user_id] = "awaiting_kung_type"
            reply_markup = ReplyKeyboardMarkup(kung_options, resize_keyboard=True)
            await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∫—É–Ω–≥–∞:", reply_markup=reply_markup)
            return

    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        reply_markup = ReplyKeyboardMarkup(pickup_buttons, resize_keyboard=True)
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        user_states[user_id] = "awaiting_pickup"
        user_data[user_id] = {}
        return

    if state == "awaiting_pickup" and text in sum(pickup_buttons, []):
        user_data[user_id]["–ø–∏–∫–∞–ø"] = text
        reply_markup = ReplyKeyboardMarkup(next_step_buttons, resize_keyboard=True)
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {text}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–¥—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=reply_markup)
        user_states[user_id] = "awaiting_addon"
        return

    if state == "awaiting_addon" and text == "–ö—É–Ω–≥":
        user_states[user_id] = "awaiting_kung_type"
        reply_markup = ReplyKeyboardMarkup(kung_options, resize_keyboard=True)
        await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏: –ö—É–Ω–≥. –£—Ç–æ—á–Ω–∏—Ç–µ —Ç–∏–ø:", reply_markup=reply_markup)
        return

    if state == "awaiting_addon" and text == "–ê–≤—Ç–æ–¥–æ–º":
        user_states[user_id] = "awaiting_contact_info"
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.")
        return

    if state == "awaiting_kung_type":
        user_data[user_id]["–∫—É–Ω–≥–æ–≤—ã–π_—Ç–∏–ø"] = text
        pickup = user_data[user_id].get("–ø–∏–∫–∞–ø")

        # –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –ø–∏–∫–∞–ø—É
        filename_map = {
            "Changan Hunter": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "ch.st.JPG", "–ü—Ä–æ": "ch.pro.jpeg"},
            "Dongfeng DF6": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "df6.st.JPG"},
            "RAM 1500 / 2500 / 3500": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "dr.st.JPG", "–ü—Ä–æ": "dr.pro.JPG"},
            "Rambox": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "drb.HEIC", "–ü—Ä–æ": "drb.HEIC"},
            "Ford F-150 / F-250 / F-350": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "ford.mov", "–ü—Ä–æ": "ford.mov"},
            "Foton Tunland V9 / G7": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "FT.st.JPG", "–ü—Ä–æ": "FT.st.JPG"},
            "Great Wall Poer (GWM Poer)": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "GW.st.JPG", "–ü—Ä–æ": "GW.pro.JPG"},
            "Great Wall Wingle 5 / Wingle 7": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "GWW7.st.JPG", "–ü—Ä–æ": "GWW7.pro.JPG"},
            "Isuzu D-Max": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "IDM.st.JPG", "–ü—Ä–æ": "IDM.st.JPG"},
            "Jeep Gladiator": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "JG.o.JPG", "–ü—Ä–æ": "JG.o.JPG"},
            "JMC Vigus / Baodian": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "JMC.vig.heic", "–ü—Ä–æ": "JMC.vig.heic"},
            "Mitsubishi L200": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "ML200.st.JPG", "–ü—Ä–æ": "ML200.st.JPG"},
            "Nissan Navara (NP300)": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "NN.st.heic", "–ü—Ä–æ": "NN.pro.HEIC"},
            "Nissan Titan / Titan XD": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "NT.pro.JPG", "–ü—Ä–æ": "NT.pro.JPG"},
            "Sollers ST8": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "ST6.JPG", "–ü—Ä–æ": "ST6.JPG"},
            "SsangYong Actyon Sports": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "SY.JPG", "–ü—Ä–æ": "SY.JPG"},
            "TLC79": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "TLS.st.PNG", "–ü—Ä–æ": "TLS.pro.JPG"},
            "Toyota Hilux": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "TH.st.jpeg", "–ü—Ä–æ": "TH.pro.jpg"},
            "Toyota Tacoma": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "TT..JPG", "–ü—Ä–æ": "TT..JPG"},
            "Toyota Tundra": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "TTU.st.jpeg", "–ü—Ä–æ": "TTU.pro.JPG"},
            "UAZ Pickup": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "UAZ.PNG", "–ü—Ä–æ": "UAZ.PNG"},
            "Volkswagen Amarok": {"–°—Ç–∞–Ω–¥–∞—Ä—Ç": "VW.JPG", "–ü—Ä–æ": "VW.JPG"}
        }

        if pickup in filename_map and text in filename_map[pickup]:
            file_name = filename_map[pickup][text]
            file_path = os.path.join(PHOTO_PATH, file_name)
            if os.path.exists(file_path):
                with open(file_path, "rb") as photo:
                    if file_name.endswith(".mov"):
                        await update.message.reply_document(photo)
                    else:
                        await update.message.reply_photo(photo)

        if text == "–°—Ç–∞–Ω–¥–∞—Ä—Ç":
            await update.message.reply_text(
                "üîπ –ö—É–Ω–≥ ‚Äú–°—Ç–∞–Ω–¥–∞—Ä—Ç‚Äù ‚Äî –±–∞–∑–æ–≤–∞—è, –Ω–æ –ø—Ä–æ—á–Ω–∞—è –Ω–∞–¥—Å—Ç—Ä–æ–π–∫–∞, –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏.\n"
                "üì¶ –í—ã–ø–æ–ª–Ω–µ–Ω –∏–∑ –∞–ª—é–º–∏–Ω–∏–µ–≤–æ–≥–æ –∫–∞—Ä–∫–∞—Å–∞ , –∑–∞—â–∏—â–∞–µ—Ç –≥—Ä—É–∑ –æ—Ç –æ—Å–∞–¥–∫–æ–≤ –∏ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞.\n"
                "‚öôÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –±–µ–∑ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –∫—É–∑–æ–≤–∞.\n"
                "üõ† –í–Ω—É—Ç—Ä–∏ ‚Äî —á–∏—Å—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥ –∑–∞–¥–∞—á—É: –ø–æ–ª–∫–∏, —è—â–∏–∫–∏, –æ—Å–≤–µ—â–µ–Ω–∏–µ, —É—Ç–µ–ø–ª–µ–Ω–∏–µ.\n"
                "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –∏ –±—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç."
            )
        elif text == "–ü—Ä–æ":
            await update.message.reply_text(
                "üîπ –ö—É–Ω–≥ ‚Äú–ü—Ä–æ‚Äù ‚Äî —ç—Ç–æ –≤–µ—Ä—Å–∏—è, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ: –±–æ–ª—å—à–µ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏, –±–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, –±–æ–ª—å—à–µ —Å—Ç–∏–ª—è.\n"
                "üõ° –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω –∏–∑ –∞–ª—é–º–∏–Ω–∏–µ–≤–æ–≥–æ –∫–∞—Ä–∫–∞—Å–∞, –≤—ã–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—è–∂—ë–ª—É—é —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞.\n"
                "‚öôÔ∏è –í–æ–∑–º–æ–∂–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞: –æ—Å–≤–µ—â–µ–Ω–∏—è, —Ä–æ–∑–µ—Ç–æ–∫, –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –æ—Ç–æ–ø–ª–µ–Ω–∏—è, –∫—Ä–µ–ø–µ–∂–µ–π, –ø–æ–ª–æ–∫ –∏ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π.\n"
                "üíº –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π, –æ—Ö–æ—Ç—ã –∏–ª–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π."
            )
        elif text == "–ü–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º—É –∑–∞–∫–∞–∑—É":
            await update.message.reply_text(
                "üéØ –ö—É–Ω–≥ –ø–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º—É –∑–∞–∫–∞–∑—É ‚Äî —ç—Ç–æ –∏—Å—Ç–æ—Ä–∏—è, –∫–æ—Ç–æ—Ä—É—é –º—ã —Å–æ–∑–¥–∞—ë–º –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏.\n"
                "üîß –•–æ—Ç–∏—Ç–µ –∫—É–Ω–≥ –ø–æ–¥ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏, –≤—ã—Å—Ç–∞–≤–∫–∏, –æ—Ö–æ—Ç—É, —Å—Ç—Ä–æ–π–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å –¥—É—à–æ–π ‚Äî –º—ã –≤–æ–ø–ª–æ—Ç–∏–º –≤—Å—ë, —á—Ç–æ –≤—ã –∑–∞–¥—É–º–∞–ª–∏.\n"
                "üõ† –ü—Ä–æ–µ–∫—Ç—ã –ø–æ–¥ –∫–ª—é—á: —Å –æ–∫–Ω–∞–º–∏, –æ—Å–≤–µ—â–µ–Ω–∏–µ–º, –æ—Ç–æ–ø–ª–µ–Ω–∏–µ–º, –æ—Ç–¥–µ–ª–∫–æ–π –∏ –ª—é–±—ã–º–∏ –º–æ–¥—É–ª—è–º–∏.\n"
                "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è ‚Äî –º—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –∏ –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –∫—É–Ω–≥."
            )

        await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞:")
        user_states[user_id] = "awaiting_final_contact"
        return

    if state == "awaiting_final_contact":
        contact_info = update.message.text
        summary = user_data.get(user_id, {})
        pickup = summary.get("–ø–∏–∫–∞–ø", "[–Ω–µ —É–∫–∞–∑–∞–Ω–æ]")
        kung_type = summary.get("–∫—É–Ω–≥–æ–≤—ã–π_—Ç–∏–ø", text)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞. ‚òéÔ∏è")
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–ü–∏–∫–∞–ø: {pickup}\n–ö—É–Ω–≥: {kung_type}\n–ö–æ–Ω—Ç–∞–∫—Ç: {contact_info}"
        )
        user_states.pop(user_id)
        user_data.pop(user_id, None)
        return

    if state == "awaiting_contact_info":
        contact_info = update.message.text
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, –º—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏! üìû")
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n{contact_info}"
        )
        user_states.pop(user_id)
        user_data.pop(user_id, None)
        return

    await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {text}. –°–ø–∞—Å–∏–±–æ! üõ†")

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_pickup_choice))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()

